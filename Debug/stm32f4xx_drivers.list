
stm32f4xx_drivers.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   000001a8  08000000  08000000  00010000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         00000488  080001a8  080001a8  000101a8  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       00000000  08000630  08000638  00010638  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  3 .ARM.extab    00000000  08000630  08000630  00010638  2**0
                  CONTENTS
  4 .ARM          00000000  08000630  08000630  00010638  2**0
                  CONTENTS
  5 .preinit_array 00000000  08000630  08000638  00010638  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000004  08000630  08000630  00010630  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  7 .fini_array   00000004  08000634  08000634  00010634  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  8 .data         00000000  20000000  20000000  00010638  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  9 .bss          0000001c  20000000  08000638  00020000  2**2
                  ALLOC
 10 ._user_heap_stack 00000604  2000001c  08000638  0002001c  2**0
                  ALLOC
 11 .ARM.attributes 00000030  00000000  00000000  00010638  2**0
                  CONTENTS, READONLY
 12 .debug_info   00000777  00000000  00000000  00010668  2**0
                  CONTENTS, READONLY, DEBUGGING
 13 .debug_abbrev 000001f0  00000000  00000000  00010ddf  2**0
                  CONTENTS, READONLY, DEBUGGING
 14 .debug_aranges 000000a8  00000000  00000000  00010fd0  2**3
                  CONTENTS, READONLY, DEBUGGING
 15 .debug_ranges 00000080  00000000  00000000  00011078  2**3
                  CONTENTS, READONLY, DEBUGGING
 16 .debug_macro  00001247  00000000  00000000  000110f8  2**0
                  CONTENTS, READONLY, DEBUGGING
 17 .debug_line   000009da  00000000  00000000  0001233f  2**0
                  CONTENTS, READONLY, DEBUGGING
 18 .debug_str    00004bf3  00000000  00000000  00012d19  2**0
                  CONTENTS, READONLY, DEBUGGING
 19 .comment      0000007b  00000000  00000000  0001790c  2**0
                  CONTENTS, READONLY
 20 .debug_frame  000001d4  00000000  00000000  00017988  2**2
                  CONTENTS, READONLY, DEBUGGING

Disassembly of section .text:

080001a8 <__do_global_dtors_aux>:
 80001a8:	b510      	push	{r4, lr}
 80001aa:	4c05      	ldr	r4, [pc, #20]	; (80001c0 <__do_global_dtors_aux+0x18>)
 80001ac:	7823      	ldrb	r3, [r4, #0]
 80001ae:	b933      	cbnz	r3, 80001be <__do_global_dtors_aux+0x16>
 80001b0:	4b04      	ldr	r3, [pc, #16]	; (80001c4 <__do_global_dtors_aux+0x1c>)
 80001b2:	b113      	cbz	r3, 80001ba <__do_global_dtors_aux+0x12>
 80001b4:	4804      	ldr	r0, [pc, #16]	; (80001c8 <__do_global_dtors_aux+0x20>)
 80001b6:	f3af 8000 	nop.w
 80001ba:	2301      	movs	r3, #1
 80001bc:	7023      	strb	r3, [r4, #0]
 80001be:	bd10      	pop	{r4, pc}
 80001c0:	20000000 	.word	0x20000000
 80001c4:	00000000 	.word	0x00000000
 80001c8:	08000618 	.word	0x08000618

080001cc <frame_dummy>:
 80001cc:	b508      	push	{r3, lr}
 80001ce:	4b03      	ldr	r3, [pc, #12]	; (80001dc <frame_dummy+0x10>)
 80001d0:	b11b      	cbz	r3, 80001da <frame_dummy+0xe>
 80001d2:	4903      	ldr	r1, [pc, #12]	; (80001e0 <frame_dummy+0x14>)
 80001d4:	4803      	ldr	r0, [pc, #12]	; (80001e4 <frame_dummy+0x18>)
 80001d6:	f3af 8000 	nop.w
 80001da:	bd08      	pop	{r3, pc}
 80001dc:	00000000 	.word	0x00000000
 80001e0:	20000004 	.word	0x20000004
 80001e4:	08000618 	.word	0x08000618

080001e8 <delay>:
#include "stm32f407xx.h"

#define BTN_PRESSED 1

void delay(void)
{
 80001e8:	b480      	push	{r7}
 80001ea:	b083      	sub	sp, #12
 80001ec:	af00      	add	r7, sp, #0
	for(uint32_t i = 0; i < 500000/2; i++);
 80001ee:	2300      	movs	r3, #0
 80001f0:	607b      	str	r3, [r7, #4]
 80001f2:	e002      	b.n	80001fa <delay+0x12>
 80001f4:	687b      	ldr	r3, [r7, #4]
 80001f6:	3301      	adds	r3, #1
 80001f8:	607b      	str	r3, [r7, #4]
 80001fa:	687b      	ldr	r3, [r7, #4]
 80001fc:	4a04      	ldr	r2, [pc, #16]	; (8000210 <delay+0x28>)
 80001fe:	4293      	cmp	r3, r2
 8000200:	d9f8      	bls.n	80001f4 <delay+0xc>
}
 8000202:	bf00      	nop
 8000204:	370c      	adds	r7, #12
 8000206:	46bd      	mov	sp, r7
 8000208:	f85d 7b04 	ldr.w	r7, [sp], #4
 800020c:	4770      	bx	lr
 800020e:	bf00      	nop
 8000210:	0003d08f 	.word	0x0003d08f

08000214 <main>:

int main(void)
{
 8000214:	b580      	push	{r7, lr}
 8000216:	b086      	sub	sp, #24
 8000218:	af00      	add	r7, sp, #0
	GPIO_Handle_t GpioLed, GPIOBtn;

	GpioLed.pGPIOx = GPIOD;
 800021a:	4b1a      	ldr	r3, [pc, #104]	; (8000284 <main+0x70>)
 800021c:	60fb      	str	r3, [r7, #12]
	GpioLed.GPIO_PinConfig.GPIO_PinNumber = GPIO_PIN_NO_12;
 800021e:	230c      	movs	r3, #12
 8000220:	743b      	strb	r3, [r7, #16]
	GpioLed.GPIO_PinConfig.GPIO_PinMode = GPIO_MODE_OUT;
 8000222:	2301      	movs	r3, #1
 8000224:	747b      	strb	r3, [r7, #17]
	GpioLed.GPIO_PinConfig.GPIO_PinSpeed = GPIO_SPEED_FAST;
 8000226:	2302      	movs	r3, #2
 8000228:	74bb      	strb	r3, [r7, #18]
	GpioLed.GPIO_PinConfig.GPIO_PinOPType = GPIO_OP_TYPE_PP;
 800022a:	2300      	movs	r3, #0
 800022c:	753b      	strb	r3, [r7, #20]
	GpioLed.GPIO_PinConfig.GPIO_PinPuPdControl = GPIO_NO_PUPD;
 800022e:	2300      	movs	r3, #0
 8000230:	74fb      	strb	r3, [r7, #19]

	GPIO_PeriClockControl(GPIOD, ENABLE);
 8000232:	2101      	movs	r1, #1
 8000234:	4813      	ldr	r0, [pc, #76]	; (8000284 <main+0x70>)
 8000236:	f000 f853 	bl	80002e0 <GPIO_PeriClockControl>
	GPIO_Init(&GpioLed);
 800023a:	f107 030c 	add.w	r3, r7, #12
 800023e:	4618      	mov	r0, r3
 8000240:	f000 f8d4 	bl	80003ec <GPIO_Init>

	GPIOBtn.pGPIOx = GPIOA;
 8000244:	4b10      	ldr	r3, [pc, #64]	; (8000288 <main+0x74>)
 8000246:	603b      	str	r3, [r7, #0]
	GPIOBtn.GPIO_PinConfig.GPIO_PinNumber = GPIO_PIN_NO_0;
 8000248:	2300      	movs	r3, #0
 800024a:	713b      	strb	r3, [r7, #4]
	GPIOBtn.GPIO_PinConfig.GPIO_PinMode = GPIO_MODE_IN;
 800024c:	2300      	movs	r3, #0
 800024e:	717b      	strb	r3, [r7, #5]
	GPIOBtn.GPIO_PinConfig.GPIO_PinSpeed = GPIO_SPEED_FAST;
 8000250:	2302      	movs	r3, #2
 8000252:	71bb      	strb	r3, [r7, #6]
	GPIOBtn.GPIO_PinConfig.GPIO_PinPuPdControl = GPIO_PIN_PU;
 8000254:	2301      	movs	r3, #1
 8000256:	71fb      	strb	r3, [r7, #7]

	GPIO_PeriClockControl(GPIOA, ENABLE);
 8000258:	2101      	movs	r1, #1
 800025a:	480b      	ldr	r0, [pc, #44]	; (8000288 <main+0x74>)
 800025c:	f000 f840 	bl	80002e0 <GPIO_PeriClockControl>
	GPIO_Init(&GPIOBtn);
 8000260:	463b      	mov	r3, r7
 8000262:	4618      	mov	r0, r3
 8000264:	f000 f8c2 	bl	80003ec <GPIO_Init>

	while(1)
	{
		if(GPIO_ReadFromInputPin(GPIOA, GPIO_PIN_NO_0) == BTN_PRESSED)
 8000268:	2100      	movs	r1, #0
 800026a:	4807      	ldr	r0, [pc, #28]	; (8000288 <main+0x74>)
 800026c:	f000 f985 	bl	800057a <GPIO_ReadFromInputPin>
 8000270:	4603      	mov	r3, r0
 8000272:	2b01      	cmp	r3, #1
 8000274:	d1f8      	bne.n	8000268 <main+0x54>
		{
			delay();
 8000276:	f7ff ffb7 	bl	80001e8 <delay>
			GPIO_ToggleOutputPin(GPIOD, GPIO_PIN_NO_12);
 800027a:	210c      	movs	r1, #12
 800027c:	4801      	ldr	r0, [pc, #4]	; (8000284 <main+0x70>)
 800027e:	f000 f992 	bl	80005a6 <GPIO_ToggleOutputPin>
		if(GPIO_ReadFromInputPin(GPIOA, GPIO_PIN_NO_0) == BTN_PRESSED)
 8000282:	e7f1      	b.n	8000268 <main+0x54>
 8000284:	40020c00 	.word	0x40020c00
 8000288:	40020000 	.word	0x40020000

0800028c <Reset_Handler>:

  .section .text.Reset_Handler
  .weak Reset_Handler
  .type Reset_Handler, %function
Reset_Handler:
  ldr   r0, =_estack
 800028c:	480d      	ldr	r0, [pc, #52]	; (80002c4 <LoopForever+0x2>)
  mov   sp, r0          /* set stack pointer */
 800028e:	4685      	mov	sp, r0

/* Copy the data segment initializers from flash to SRAM */
  ldr r0, =_sdata
 8000290:	480d      	ldr	r0, [pc, #52]	; (80002c8 <LoopForever+0x6>)
  ldr r1, =_edata
 8000292:	490e      	ldr	r1, [pc, #56]	; (80002cc <LoopForever+0xa>)
  ldr r2, =_sidata
 8000294:	4a0e      	ldr	r2, [pc, #56]	; (80002d0 <LoopForever+0xe>)
  movs r3, #0
 8000296:	2300      	movs	r3, #0
  b LoopCopyDataInit
 8000298:	e002      	b.n	80002a0 <LoopCopyDataInit>

0800029a <CopyDataInit>:

CopyDataInit:
  ldr r4, [r2, r3]
 800029a:	58d4      	ldr	r4, [r2, r3]
  str r4, [r0, r3]
 800029c:	50c4      	str	r4, [r0, r3]
  adds r3, r3, #4
 800029e:	3304      	adds	r3, #4

080002a0 <LoopCopyDataInit>:

LoopCopyDataInit:
  adds r4, r0, r3
 80002a0:	18c4      	adds	r4, r0, r3
  cmp r4, r1
 80002a2:	428c      	cmp	r4, r1
  bcc CopyDataInit
 80002a4:	d3f9      	bcc.n	800029a <CopyDataInit>

/* Zero fill the bss segment. */
  ldr r2, =_sbss
 80002a6:	4a0b      	ldr	r2, [pc, #44]	; (80002d4 <LoopForever+0x12>)
  ldr r4, =_ebss
 80002a8:	4c0b      	ldr	r4, [pc, #44]	; (80002d8 <LoopForever+0x16>)
  movs r3, #0
 80002aa:	2300      	movs	r3, #0
  b LoopFillZerobss
 80002ac:	e001      	b.n	80002b2 <LoopFillZerobss>

080002ae <FillZerobss>:

FillZerobss:
  str  r3, [r2]
 80002ae:	6013      	str	r3, [r2, #0]
  adds r2, r2, #4
 80002b0:	3204      	adds	r2, #4

080002b2 <LoopFillZerobss>:

LoopFillZerobss:
  cmp r2, r4
 80002b2:	42a2      	cmp	r2, r4
  bcc FillZerobss
 80002b4:	d3fb      	bcc.n	80002ae <FillZerobss>

/* Call the clock system intitialization function.*/
  bl  SystemInit
 80002b6:	f3af 8000 	nop.w
/* Call static constructors */
  bl __libc_init_array
 80002ba:	f000 f989 	bl	80005d0 <__libc_init_array>
/* Call the application's entry point.*/
  bl main
 80002be:	f7ff ffa9 	bl	8000214 <main>

080002c2 <LoopForever>:

LoopForever:
    b LoopForever
 80002c2:	e7fe      	b.n	80002c2 <LoopForever>
  ldr   r0, =_estack
 80002c4:	20020000 	.word	0x20020000
  ldr r0, =_sdata
 80002c8:	20000000 	.word	0x20000000
  ldr r1, =_edata
 80002cc:	20000000 	.word	0x20000000
  ldr r2, =_sidata
 80002d0:	08000638 	.word	0x08000638
  ldr r2, =_sbss
 80002d4:	20000000 	.word	0x20000000
  ldr r4, =_ebss
 80002d8:	2000001c 	.word	0x2000001c

080002dc <ADC_IRQHandler>:
 * @retval : None
*/
  .section .text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
  b Infinite_Loop
 80002dc:	e7fe      	b.n	80002dc <ADC_IRQHandler>
	...

080002e0 <GPIO_PeriClockControl>:
 * @return 				- none
 *
 * @Note				- none
 */
void GPIO_PeriClockControl(GPIO_RegDef_t *pGPIOx, uint8_t EnorDi)
{
 80002e0:	b480      	push	{r7}
 80002e2:	b083      	sub	sp, #12
 80002e4:	af00      	add	r7, sp, #0
 80002e6:	6078      	str	r0, [r7, #4]
 80002e8:	460b      	mov	r3, r1
 80002ea:	70fb      	strb	r3, [r7, #3]
	if(EnorDi == ENABLE)
 80002ec:	78fb      	ldrb	r3, [r7, #3]
 80002ee:	2b01      	cmp	r3, #1
 80002f0:	d161      	bne.n	80003b6 <GPIO_PeriClockControl+0xd6>
	{
		if(pGPIOx == GPIOA)
 80002f2:	687b      	ldr	r3, [r7, #4]
 80002f4:	4a33      	ldr	r2, [pc, #204]	; (80003c4 <GPIO_PeriClockControl+0xe4>)
 80002f6:	4293      	cmp	r3, r2
 80002f8:	d106      	bne.n	8000308 <GPIO_PeriClockControl+0x28>
		{
			GPIOA_PCLK_EN();
 80002fa:	4b33      	ldr	r3, [pc, #204]	; (80003c8 <GPIO_PeriClockControl+0xe8>)
 80002fc:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80002fe:	4a32      	ldr	r2, [pc, #200]	; (80003c8 <GPIO_PeriClockControl+0xe8>)
 8000300:	f043 0301 	orr.w	r3, r3, #1
 8000304:	6313      	str	r3, [r2, #48]	; 0x30
	}
	else
	{

	}
}
 8000306:	e056      	b.n	80003b6 <GPIO_PeriClockControl+0xd6>
		}else if(pGPIOx == GPIOB)
 8000308:	687b      	ldr	r3, [r7, #4]
 800030a:	4a30      	ldr	r2, [pc, #192]	; (80003cc <GPIO_PeriClockControl+0xec>)
 800030c:	4293      	cmp	r3, r2
 800030e:	d106      	bne.n	800031e <GPIO_PeriClockControl+0x3e>
			GPIOB_PCLK_EN();
 8000310:	4b2d      	ldr	r3, [pc, #180]	; (80003c8 <GPIO_PeriClockControl+0xe8>)
 8000312:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000314:	4a2c      	ldr	r2, [pc, #176]	; (80003c8 <GPIO_PeriClockControl+0xe8>)
 8000316:	f043 0302 	orr.w	r3, r3, #2
 800031a:	6313      	str	r3, [r2, #48]	; 0x30
}
 800031c:	e04b      	b.n	80003b6 <GPIO_PeriClockControl+0xd6>
		}else if(pGPIOx == GPIOC)
 800031e:	687b      	ldr	r3, [r7, #4]
 8000320:	4a2b      	ldr	r2, [pc, #172]	; (80003d0 <GPIO_PeriClockControl+0xf0>)
 8000322:	4293      	cmp	r3, r2
 8000324:	d106      	bne.n	8000334 <GPIO_PeriClockControl+0x54>
			GPIOC_PCLK_EN();
 8000326:	4b28      	ldr	r3, [pc, #160]	; (80003c8 <GPIO_PeriClockControl+0xe8>)
 8000328:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800032a:	4a27      	ldr	r2, [pc, #156]	; (80003c8 <GPIO_PeriClockControl+0xe8>)
 800032c:	f043 0304 	orr.w	r3, r3, #4
 8000330:	6313      	str	r3, [r2, #48]	; 0x30
}
 8000332:	e040      	b.n	80003b6 <GPIO_PeriClockControl+0xd6>
		}else if(pGPIOx == GPIOD)
 8000334:	687b      	ldr	r3, [r7, #4]
 8000336:	4a27      	ldr	r2, [pc, #156]	; (80003d4 <GPIO_PeriClockControl+0xf4>)
 8000338:	4293      	cmp	r3, r2
 800033a:	d106      	bne.n	800034a <GPIO_PeriClockControl+0x6a>
			GPIOD_PCLK_EN();
 800033c:	4b22      	ldr	r3, [pc, #136]	; (80003c8 <GPIO_PeriClockControl+0xe8>)
 800033e:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000340:	4a21      	ldr	r2, [pc, #132]	; (80003c8 <GPIO_PeriClockControl+0xe8>)
 8000342:	f043 0308 	orr.w	r3, r3, #8
 8000346:	6313      	str	r3, [r2, #48]	; 0x30
}
 8000348:	e035      	b.n	80003b6 <GPIO_PeriClockControl+0xd6>
		}else if(pGPIOx == GPIOE)
 800034a:	687b      	ldr	r3, [r7, #4]
 800034c:	4a22      	ldr	r2, [pc, #136]	; (80003d8 <GPIO_PeriClockControl+0xf8>)
 800034e:	4293      	cmp	r3, r2
 8000350:	d106      	bne.n	8000360 <GPIO_PeriClockControl+0x80>
			GPIOE_PCLK_EN();
 8000352:	4b1d      	ldr	r3, [pc, #116]	; (80003c8 <GPIO_PeriClockControl+0xe8>)
 8000354:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000356:	4a1c      	ldr	r2, [pc, #112]	; (80003c8 <GPIO_PeriClockControl+0xe8>)
 8000358:	f043 0310 	orr.w	r3, r3, #16
 800035c:	6313      	str	r3, [r2, #48]	; 0x30
}
 800035e:	e02a      	b.n	80003b6 <GPIO_PeriClockControl+0xd6>
		}else if(pGPIOx == GPIOF)
 8000360:	687b      	ldr	r3, [r7, #4]
 8000362:	4a1e      	ldr	r2, [pc, #120]	; (80003dc <GPIO_PeriClockControl+0xfc>)
 8000364:	4293      	cmp	r3, r2
 8000366:	d106      	bne.n	8000376 <GPIO_PeriClockControl+0x96>
			GPIOF_PCLK_EN();
 8000368:	4b17      	ldr	r3, [pc, #92]	; (80003c8 <GPIO_PeriClockControl+0xe8>)
 800036a:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800036c:	4a16      	ldr	r2, [pc, #88]	; (80003c8 <GPIO_PeriClockControl+0xe8>)
 800036e:	f043 0320 	orr.w	r3, r3, #32
 8000372:	6313      	str	r3, [r2, #48]	; 0x30
}
 8000374:	e01f      	b.n	80003b6 <GPIO_PeriClockControl+0xd6>
		}else if(pGPIOx == GPIOG)
 8000376:	687b      	ldr	r3, [r7, #4]
 8000378:	4a19      	ldr	r2, [pc, #100]	; (80003e0 <GPIO_PeriClockControl+0x100>)
 800037a:	4293      	cmp	r3, r2
 800037c:	d106      	bne.n	800038c <GPIO_PeriClockControl+0xac>
			GPIOG_PCLK_EN();
 800037e:	4b12      	ldr	r3, [pc, #72]	; (80003c8 <GPIO_PeriClockControl+0xe8>)
 8000380:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000382:	4a11      	ldr	r2, [pc, #68]	; (80003c8 <GPIO_PeriClockControl+0xe8>)
 8000384:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 8000388:	6313      	str	r3, [r2, #48]	; 0x30
}
 800038a:	e014      	b.n	80003b6 <GPIO_PeriClockControl+0xd6>
		}else if(pGPIOx == GPIOH)
 800038c:	687b      	ldr	r3, [r7, #4]
 800038e:	4a15      	ldr	r2, [pc, #84]	; (80003e4 <GPIO_PeriClockControl+0x104>)
 8000390:	4293      	cmp	r3, r2
 8000392:	d106      	bne.n	80003a2 <GPIO_PeriClockControl+0xc2>
			GPIOH_PCLK_EN();
 8000394:	4b0c      	ldr	r3, [pc, #48]	; (80003c8 <GPIO_PeriClockControl+0xe8>)
 8000396:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000398:	4a0b      	ldr	r2, [pc, #44]	; (80003c8 <GPIO_PeriClockControl+0xe8>)
 800039a:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 800039e:	6313      	str	r3, [r2, #48]	; 0x30
}
 80003a0:	e009      	b.n	80003b6 <GPIO_PeriClockControl+0xd6>
		}else if(pGPIOx == GPIOI)
 80003a2:	687b      	ldr	r3, [r7, #4]
 80003a4:	4a10      	ldr	r2, [pc, #64]	; (80003e8 <GPIO_PeriClockControl+0x108>)
 80003a6:	4293      	cmp	r3, r2
 80003a8:	d105      	bne.n	80003b6 <GPIO_PeriClockControl+0xd6>
			GPIOI_PCLK_EN();
 80003aa:	4b07      	ldr	r3, [pc, #28]	; (80003c8 <GPIO_PeriClockControl+0xe8>)
 80003ac:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80003ae:	4a06      	ldr	r2, [pc, #24]	; (80003c8 <GPIO_PeriClockControl+0xe8>)
 80003b0:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 80003b4:	6313      	str	r3, [r2, #48]	; 0x30
}
 80003b6:	bf00      	nop
 80003b8:	370c      	adds	r7, #12
 80003ba:	46bd      	mov	sp, r7
 80003bc:	f85d 7b04 	ldr.w	r7, [sp], #4
 80003c0:	4770      	bx	lr
 80003c2:	bf00      	nop
 80003c4:	40020000 	.word	0x40020000
 80003c8:	40023800 	.word	0x40023800
 80003cc:	40020400 	.word	0x40020400
 80003d0:	40020800 	.word	0x40020800
 80003d4:	40020c00 	.word	0x40020c00
 80003d8:	40021000 	.word	0x40021000
 80003dc:	40021400 	.word	0x40021400
 80003e0:	40021800 	.word	0x40021800
 80003e4:	40021c00 	.word	0x40021c00
 80003e8:	40022000 	.word	0x40022000

080003ec <GPIO_Init>:

/*
 * Init and De-Init
 */
void GPIO_Init(GPIO_Handle_t *pGPIOHandle)
{
 80003ec:	b480      	push	{r7}
 80003ee:	b085      	sub	sp, #20
 80003f0:	af00      	add	r7, sp, #0
 80003f2:	6078      	str	r0, [r7, #4]
	uint32_t temp = 0;
 80003f4:	2300      	movs	r3, #0
 80003f6:	60fb      	str	r3, [r7, #12]
	//1. configure the mode of gpio pin
	if(pGPIOHandle->GPIO_PinConfig.GPIO_PinMode <= GPIO_MODE_ANALOG)
 80003f8:	687b      	ldr	r3, [r7, #4]
 80003fa:	795b      	ldrb	r3, [r3, #5]
 80003fc:	2b03      	cmp	r3, #3
 80003fe:	d81e      	bhi.n	800043e <GPIO_Init+0x52>
	{
		temp = (pGPIOHandle->GPIO_PinConfig.GPIO_PinMode << (2 *pGPIOHandle->GPIO_PinConfig.GPIO_PinNumber));
 8000400:	687b      	ldr	r3, [r7, #4]
 8000402:	795b      	ldrb	r3, [r3, #5]
 8000404:	461a      	mov	r2, r3
 8000406:	687b      	ldr	r3, [r7, #4]
 8000408:	791b      	ldrb	r3, [r3, #4]
 800040a:	005b      	lsls	r3, r3, #1
 800040c:	fa02 f303 	lsl.w	r3, r2, r3
 8000410:	60fb      	str	r3, [r7, #12]
		pGPIOHandle->pGPIOx->MODER &= ~( 0x3 << pGPIOHandle->GPIO_PinConfig.GPIO_PinNumber); //clearing
 8000412:	687b      	ldr	r3, [r7, #4]
 8000414:	681b      	ldr	r3, [r3, #0]
 8000416:	681a      	ldr	r2, [r3, #0]
 8000418:	687b      	ldr	r3, [r7, #4]
 800041a:	791b      	ldrb	r3, [r3, #4]
 800041c:	4619      	mov	r1, r3
 800041e:	2303      	movs	r3, #3
 8000420:	408b      	lsls	r3, r1
 8000422:	43db      	mvns	r3, r3
 8000424:	4619      	mov	r1, r3
 8000426:	687b      	ldr	r3, [r7, #4]
 8000428:	681b      	ldr	r3, [r3, #0]
 800042a:	400a      	ands	r2, r1
 800042c:	601a      	str	r2, [r3, #0]
		pGPIOHandle->pGPIOx->MODER |= temp; //setting
 800042e:	687b      	ldr	r3, [r7, #4]
 8000430:	681b      	ldr	r3, [r3, #0]
 8000432:	6819      	ldr	r1, [r3, #0]
 8000434:	687b      	ldr	r3, [r7, #4]
 8000436:	681b      	ldr	r3, [r3, #0]
 8000438:	68fa      	ldr	r2, [r7, #12]
 800043a:	430a      	orrs	r2, r1
 800043c:	601a      	str	r2, [r3, #0]
	}else
	{

	}

	temp = 0;
 800043e:	2300      	movs	r3, #0
 8000440:	60fb      	str	r3, [r7, #12]

	//2. configure the speed
	temp = (pGPIOHandle->GPIO_PinConfig.GPIO_PinSpeed << (2 *pGPIOHandle->GPIO_PinConfig.GPIO_PinNumber));
 8000442:	687b      	ldr	r3, [r7, #4]
 8000444:	799b      	ldrb	r3, [r3, #6]
 8000446:	461a      	mov	r2, r3
 8000448:	687b      	ldr	r3, [r7, #4]
 800044a:	791b      	ldrb	r3, [r3, #4]
 800044c:	005b      	lsls	r3, r3, #1
 800044e:	fa02 f303 	lsl.w	r3, r2, r3
 8000452:	60fb      	str	r3, [r7, #12]
	pGPIOHandle->pGPIOx->OSPEEDR &= ~( 0x3 << pGPIOHandle->GPIO_PinConfig.GPIO_PinNumber); //clearing
 8000454:	687b      	ldr	r3, [r7, #4]
 8000456:	681b      	ldr	r3, [r3, #0]
 8000458:	689a      	ldr	r2, [r3, #8]
 800045a:	687b      	ldr	r3, [r7, #4]
 800045c:	791b      	ldrb	r3, [r3, #4]
 800045e:	4619      	mov	r1, r3
 8000460:	2303      	movs	r3, #3
 8000462:	408b      	lsls	r3, r1
 8000464:	43db      	mvns	r3, r3
 8000466:	4619      	mov	r1, r3
 8000468:	687b      	ldr	r3, [r7, #4]
 800046a:	681b      	ldr	r3, [r3, #0]
 800046c:	400a      	ands	r2, r1
 800046e:	609a      	str	r2, [r3, #8]
	pGPIOHandle->pGPIOx->OSPEEDR |= temp;
 8000470:	687b      	ldr	r3, [r7, #4]
 8000472:	681b      	ldr	r3, [r3, #0]
 8000474:	6899      	ldr	r1, [r3, #8]
 8000476:	687b      	ldr	r3, [r7, #4]
 8000478:	681b      	ldr	r3, [r3, #0]
 800047a:	68fa      	ldr	r2, [r7, #12]
 800047c:	430a      	orrs	r2, r1
 800047e:	609a      	str	r2, [r3, #8]

	temp = 0;
 8000480:	2300      	movs	r3, #0
 8000482:	60fb      	str	r3, [r7, #12]

	//3. configure the pupd settings
	temp = (pGPIOHandle->GPIO_PinConfig.GPIO_PinPuPdControl << (2 *pGPIOHandle->GPIO_PinConfig.GPIO_PinNumber));
 8000484:	687b      	ldr	r3, [r7, #4]
 8000486:	79db      	ldrb	r3, [r3, #7]
 8000488:	461a      	mov	r2, r3
 800048a:	687b      	ldr	r3, [r7, #4]
 800048c:	791b      	ldrb	r3, [r3, #4]
 800048e:	005b      	lsls	r3, r3, #1
 8000490:	fa02 f303 	lsl.w	r3, r2, r3
 8000494:	60fb      	str	r3, [r7, #12]
	pGPIOHandle->pGPIOx->PUPDR &= ~( 0x3 << pGPIOHandle->GPIO_PinConfig.GPIO_PinNumber); //clearing
 8000496:	687b      	ldr	r3, [r7, #4]
 8000498:	681b      	ldr	r3, [r3, #0]
 800049a:	68da      	ldr	r2, [r3, #12]
 800049c:	687b      	ldr	r3, [r7, #4]
 800049e:	791b      	ldrb	r3, [r3, #4]
 80004a0:	4619      	mov	r1, r3
 80004a2:	2303      	movs	r3, #3
 80004a4:	408b      	lsls	r3, r1
 80004a6:	43db      	mvns	r3, r3
 80004a8:	4619      	mov	r1, r3
 80004aa:	687b      	ldr	r3, [r7, #4]
 80004ac:	681b      	ldr	r3, [r3, #0]
 80004ae:	400a      	ands	r2, r1
 80004b0:	60da      	str	r2, [r3, #12]
	pGPIOHandle->pGPIOx->PUPDR |= temp;
 80004b2:	687b      	ldr	r3, [r7, #4]
 80004b4:	681b      	ldr	r3, [r3, #0]
 80004b6:	68d9      	ldr	r1, [r3, #12]
 80004b8:	687b      	ldr	r3, [r7, #4]
 80004ba:	681b      	ldr	r3, [r3, #0]
 80004bc:	68fa      	ldr	r2, [r7, #12]
 80004be:	430a      	orrs	r2, r1
 80004c0:	60da      	str	r2, [r3, #12]

	temp = 0;
 80004c2:	2300      	movs	r3, #0
 80004c4:	60fb      	str	r3, [r7, #12]

	//4. configure the optype
	temp = (pGPIOHandle->GPIO_PinConfig.GPIO_PinOPType << pGPIOHandle->GPIO_PinConfig.GPIO_PinNumber);
 80004c6:	687b      	ldr	r3, [r7, #4]
 80004c8:	7a1b      	ldrb	r3, [r3, #8]
 80004ca:	461a      	mov	r2, r3
 80004cc:	687b      	ldr	r3, [r7, #4]
 80004ce:	791b      	ldrb	r3, [r3, #4]
 80004d0:	fa02 f303 	lsl.w	r3, r2, r3
 80004d4:	60fb      	str	r3, [r7, #12]
	pGPIOHandle->pGPIOx->OTYPER &= ~( 0x1 << pGPIOHandle->GPIO_PinConfig.GPIO_PinNumber); //clearing
 80004d6:	687b      	ldr	r3, [r7, #4]
 80004d8:	681b      	ldr	r3, [r3, #0]
 80004da:	685a      	ldr	r2, [r3, #4]
 80004dc:	687b      	ldr	r3, [r7, #4]
 80004de:	791b      	ldrb	r3, [r3, #4]
 80004e0:	4619      	mov	r1, r3
 80004e2:	2301      	movs	r3, #1
 80004e4:	408b      	lsls	r3, r1
 80004e6:	43db      	mvns	r3, r3
 80004e8:	4619      	mov	r1, r3
 80004ea:	687b      	ldr	r3, [r7, #4]
 80004ec:	681b      	ldr	r3, [r3, #0]
 80004ee:	400a      	ands	r2, r1
 80004f0:	605a      	str	r2, [r3, #4]
	pGPIOHandle->pGPIOx->OTYPER |= temp;
 80004f2:	687b      	ldr	r3, [r7, #4]
 80004f4:	681b      	ldr	r3, [r3, #0]
 80004f6:	6859      	ldr	r1, [r3, #4]
 80004f8:	687b      	ldr	r3, [r7, #4]
 80004fa:	681b      	ldr	r3, [r3, #0]
 80004fc:	68fa      	ldr	r2, [r7, #12]
 80004fe:	430a      	orrs	r2, r1
 8000500:	605a      	str	r2, [r3, #4]

	//5. configure the alt functionality
	if(pGPIOHandle->GPIO_PinConfig.GPIO_PinMode == GPIO_MODE_ALTFN)
 8000502:	687b      	ldr	r3, [r7, #4]
 8000504:	795b      	ldrb	r3, [r3, #5]
 8000506:	2b02      	cmp	r3, #2
 8000508:	d131      	bne.n	800056e <GPIO_Init+0x182>
	{
		uint8_t temp1, temp2;

		temp1 = pGPIOHandle->GPIO_PinConfig.GPIO_PinNumber / 8;
 800050a:	687b      	ldr	r3, [r7, #4]
 800050c:	791b      	ldrb	r3, [r3, #4]
 800050e:	08db      	lsrs	r3, r3, #3
 8000510:	72fb      	strb	r3, [r7, #11]
		temp2 = pGPIOHandle->GPIO_PinConfig.GPIO_PinNumber % 8;
 8000512:	687b      	ldr	r3, [r7, #4]
 8000514:	791b      	ldrb	r3, [r3, #4]
 8000516:	f003 0307 	and.w	r3, r3, #7
 800051a:	72bb      	strb	r3, [r7, #10]
		pGPIOHandle->pGPIOx->AFR[temp1] &= ~(0xF << (4 * temp2)); //clearing
 800051c:	687b      	ldr	r3, [r7, #4]
 800051e:	681b      	ldr	r3, [r3, #0]
 8000520:	7afa      	ldrb	r2, [r7, #11]
 8000522:	3208      	adds	r2, #8
 8000524:	f853 1022 	ldr.w	r1, [r3, r2, lsl #2]
 8000528:	7abb      	ldrb	r3, [r7, #10]
 800052a:	009b      	lsls	r3, r3, #2
 800052c:	220f      	movs	r2, #15
 800052e:	fa02 f303 	lsl.w	r3, r2, r3
 8000532:	43db      	mvns	r3, r3
 8000534:	4618      	mov	r0, r3
 8000536:	687b      	ldr	r3, [r7, #4]
 8000538:	681b      	ldr	r3, [r3, #0]
 800053a:	7afa      	ldrb	r2, [r7, #11]
 800053c:	4001      	ands	r1, r0
 800053e:	3208      	adds	r2, #8
 8000540:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
		pGPIOHandle->pGPIOx->AFR[temp1] |= (pGPIOHandle->GPIO_PinConfig.GPIO_PinAltFunMode << (4 * temp2));
 8000544:	687b      	ldr	r3, [r7, #4]
 8000546:	681b      	ldr	r3, [r3, #0]
 8000548:	7afa      	ldrb	r2, [r7, #11]
 800054a:	3208      	adds	r2, #8
 800054c:	f853 1022 	ldr.w	r1, [r3, r2, lsl #2]
 8000550:	687b      	ldr	r3, [r7, #4]
 8000552:	7a5b      	ldrb	r3, [r3, #9]
 8000554:	461a      	mov	r2, r3
 8000556:	7abb      	ldrb	r3, [r7, #10]
 8000558:	009b      	lsls	r3, r3, #2
 800055a:	fa02 f303 	lsl.w	r3, r2, r3
 800055e:	4618      	mov	r0, r3
 8000560:	687b      	ldr	r3, [r7, #4]
 8000562:	681b      	ldr	r3, [r3, #0]
 8000564:	7afa      	ldrb	r2, [r7, #11]
 8000566:	4301      	orrs	r1, r0
 8000568:	3208      	adds	r2, #8
 800056a:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
	}
}
 800056e:	bf00      	nop
 8000570:	3714      	adds	r7, #20
 8000572:	46bd      	mov	sp, r7
 8000574:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000578:	4770      	bx	lr

0800057a <GPIO_ReadFromInputPin>:

/*
 * Data read and write
 */
uint8_t GPIO_ReadFromInputPin(GPIO_RegDef_t *pGPIOx, uint8_t PinNumber)
{
 800057a:	b480      	push	{r7}
 800057c:	b085      	sub	sp, #20
 800057e:	af00      	add	r7, sp, #0
 8000580:	6078      	str	r0, [r7, #4]
 8000582:	460b      	mov	r3, r1
 8000584:	70fb      	strb	r3, [r7, #3]
	uint8_t value;
	value = (uint8_t)((pGPIOx->IDR >> PinNumber) & 0x00000001);
 8000586:	687b      	ldr	r3, [r7, #4]
 8000588:	691a      	ldr	r2, [r3, #16]
 800058a:	78fb      	ldrb	r3, [r7, #3]
 800058c:	fa22 f303 	lsr.w	r3, r2, r3
 8000590:	b2db      	uxtb	r3, r3
 8000592:	f003 0301 	and.w	r3, r3, #1
 8000596:	73fb      	strb	r3, [r7, #15]
	return value;
 8000598:	7bfb      	ldrb	r3, [r7, #15]
}
 800059a:	4618      	mov	r0, r3
 800059c:	3714      	adds	r7, #20
 800059e:	46bd      	mov	sp, r7
 80005a0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80005a4:	4770      	bx	lr

080005a6 <GPIO_ToggleOutputPin>:
{
	pGPIOx->ODR = Value;
}

void GPIO_ToggleOutputPin(GPIO_RegDef_t *pGPIOx, uint8_t PinNumber)
{
 80005a6:	b480      	push	{r7}
 80005a8:	b083      	sub	sp, #12
 80005aa:	af00      	add	r7, sp, #0
 80005ac:	6078      	str	r0, [r7, #4]
 80005ae:	460b      	mov	r3, r1
 80005b0:	70fb      	strb	r3, [r7, #3]
	pGPIOx->ODR ^= (1 << PinNumber);
 80005b2:	687b      	ldr	r3, [r7, #4]
 80005b4:	695b      	ldr	r3, [r3, #20]
 80005b6:	78fa      	ldrb	r2, [r7, #3]
 80005b8:	2101      	movs	r1, #1
 80005ba:	fa01 f202 	lsl.w	r2, r1, r2
 80005be:	405a      	eors	r2, r3
 80005c0:	687b      	ldr	r3, [r7, #4]
 80005c2:	615a      	str	r2, [r3, #20]
}
 80005c4:	bf00      	nop
 80005c6:	370c      	adds	r7, #12
 80005c8:	46bd      	mov	sp, r7
 80005ca:	f85d 7b04 	ldr.w	r7, [sp], #4
 80005ce:	4770      	bx	lr

080005d0 <__libc_init_array>:
 80005d0:	b570      	push	{r4, r5, r6, lr}
 80005d2:	4e0d      	ldr	r6, [pc, #52]	; (8000608 <__libc_init_array+0x38>)
 80005d4:	4c0d      	ldr	r4, [pc, #52]	; (800060c <__libc_init_array+0x3c>)
 80005d6:	1ba4      	subs	r4, r4, r6
 80005d8:	10a4      	asrs	r4, r4, #2
 80005da:	2500      	movs	r5, #0
 80005dc:	42a5      	cmp	r5, r4
 80005de:	d109      	bne.n	80005f4 <__libc_init_array+0x24>
 80005e0:	4e0b      	ldr	r6, [pc, #44]	; (8000610 <__libc_init_array+0x40>)
 80005e2:	4c0c      	ldr	r4, [pc, #48]	; (8000614 <__libc_init_array+0x44>)
 80005e4:	f000 f818 	bl	8000618 <_init>
 80005e8:	1ba4      	subs	r4, r4, r6
 80005ea:	10a4      	asrs	r4, r4, #2
 80005ec:	2500      	movs	r5, #0
 80005ee:	42a5      	cmp	r5, r4
 80005f0:	d105      	bne.n	80005fe <__libc_init_array+0x2e>
 80005f2:	bd70      	pop	{r4, r5, r6, pc}
 80005f4:	f856 3025 	ldr.w	r3, [r6, r5, lsl #2]
 80005f8:	4798      	blx	r3
 80005fa:	3501      	adds	r5, #1
 80005fc:	e7ee      	b.n	80005dc <__libc_init_array+0xc>
 80005fe:	f856 3025 	ldr.w	r3, [r6, r5, lsl #2]
 8000602:	4798      	blx	r3
 8000604:	3501      	adds	r5, #1
 8000606:	e7f2      	b.n	80005ee <__libc_init_array+0x1e>
 8000608:	08000630 	.word	0x08000630
 800060c:	08000630 	.word	0x08000630
 8000610:	08000630 	.word	0x08000630
 8000614:	08000634 	.word	0x08000634

08000618 <_init>:
 8000618:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800061a:	bf00      	nop
 800061c:	bcf8      	pop	{r3, r4, r5, r6, r7}
 800061e:	bc08      	pop	{r3}
 8000620:	469e      	mov	lr, r3
 8000622:	4770      	bx	lr

08000624 <_fini>:
 8000624:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8000626:	bf00      	nop
 8000628:	bcf8      	pop	{r3, r4, r5, r6, r7}
 800062a:	bc08      	pop	{r3}
 800062c:	469e      	mov	lr, r3
 800062e:	4770      	bx	lr
